{"version":3,"sources":["components/TodoItem.tsx","components/AddTodo.tsx","data/IdGenerator.ts","components/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoItem","props","todoItem","key","id","className","completed","type","checked","onChange","changeStatus","content","onClick","handleDelete","AddTodo","handleOnChange","event","target","value","setState","state","onSubmit","e","preventDefault","handleAdd","name","placeholder","this","Component","IdGenerator","idGenerator","i","todoList","TodoList","filter","todo","index","findIndex","Object","assign","next","push","total","length","done","map","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bb5a0597.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Todo {\n  id: number;\n  content: string;\n  completed: boolean;\n}\n\ninterface TodoItemProps {\n  todoItem: Todo;\n  handleDelete: () => void;\n  changeStatus: () => void;\n}\n\nconst TodoItem = (props: TodoItemProps) => {\n  const todoItem: Todo = props.todoItem;\n  return (\n    <li key={todoItem.id} className={`row ${todoItem.completed ? 'done' : ''}`}>\n      <label className={`content ${todoItem.completed ? 'strike' : ''}`}>\n        <input\n          type=\"checkbox\"\n          checked={todoItem.completed}\n          onChange={props.changeStatus}\n        />\n        {todoItem.content}\n      </label>\n\n      <div className=\"delete-button\">\n        <button onClick={props.handleDelete}>Delete</button>\n      </div>\n    </li>\n  );\n};\n\nexport default TodoItem;\n","import React, { Component } from 'react';\n\ninterface AddTodoState {\n  content: string;\n}\n\ninterface AddTodoProps {\n  handleAdd: (e: any) => void;\n}\n\nexport default class AddTodo extends Component<AddTodoProps, AddTodoState> {\n  constructor(props: AddTodoProps) {\n    super(props);\n    this.state = {\n      content: '',\n    };\n  }\n  handleOnChange = (event: any) => {\n    let content = event.target.value;\n    this.setState({\n      content,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            this.props.handleAdd(this.state.content);\n            this.setState({\n              content: '',\n            });\n          }}\n        >\n          <div className=\"form-row\">\n            <input\n              type=\"text\"\n              name=\"todo\"\n              placeholder=\"Add new Todo...\"\n              value={this.state.content}\n              onChange={this.handleOnChange}\n            />\n          </div>\n          <div className=\"form-row\">\n            <button type=\"submit\">Add</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n","const idGenerator = function* () {\n  let i = 6;\n  while (true) {\n    yield i++;\n  }\n};\n\nconst IdGenerator = idGenerator();\n\nexport default IdGenerator;\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport AddTodo from './AddTodo';\nimport IdGenerator from '../data/IdGenerator';\n\ninterface Todo {\n  id: number;\n  content: string;\n  completed: boolean;\n}\n\ninterface State {\n  todoList: Todo[];\n}\n\n// Mocking Todo List\nconst todoList: Todo[] = [\n  {\n    id: 1,\n    content: 'Go shopping',\n    completed: false,\n  },\n  {\n    id: 2,\n    content: 'Learning ReactJS',\n    completed: false,\n  },\n  {\n    id: 3,\n    content: 'Doing Exercises',\n    completed: true,\n  },\n  {\n    id: 4,\n    content: 'Doing homework',\n    completed: false,\n  },\n  {\n    id: 5,\n    content: 'Playing games :)',\n    completed: false,\n  },\n];\n\nexport default class TodoList extends Component<{}, State> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      todoList,\n    };\n  }\n\n  handleDelete = (id: number) => {\n    let todoList: Todo[] = this.state.todoList;\n    todoList = todoList.filter((todo: Todo) => todo.id !== id);\n    this.setState({\n      todoList,\n    });\n  };\n\n  changeStatus = (id: number) => {\n    let todoList: Todo[] = this.state.todoList;\n    let index = todoList.findIndex((todo) => todo.id === id);\n    if (index >= 0) {\n      Object.assign(todoList[index], { completed: !todoList[index].completed });\n      this.setState({\n        todoList,\n      });\n    }\n  };\n\n  handleAdd = (content: string) => {\n    if (!content) return;\n\n    let todo: Todo = {\n      id: IdGenerator.next().value,\n      content,\n      completed: false,\n    };\n\n    let todoList: Todo[] = this.state.todoList;\n    todoList.push(todo);\n    this.setState({\n      todoList,\n    });\n  };\n\n  render() {\n    let todoList: Todo[] = this.state.todoList;\n    let total: number = todoList.length;\n    let done: number = todoList.filter((todo) => todo.completed).length;\n    return (\n      <>\n        <AddTodo handleAdd={this.handleAdd} />\n        <div className=\"statistic\">\n          <div className=\"total\">{`Total: ${total}`}</div>\n          <div className=\"resolved\">{`Done: ${done}`}</div>\n          <div className=\"in-progress\">{`In-Progress: ${total - done}`}</div>\n        </div>\n        <div className=\"todo-container\">\n          <ul className=\"todo-list\">\n            {todoList.map((todo: Todo) => (\n              <TodoItem\n                todoItem={todo}\n                handleDelete={() => this.handleDelete(todo.id)}\n                changeStatus={() => this.changeStatus(todo.id)}\n              />\n            ))}\n          </ul>\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        <h1>My Todo App</h1>\n      </div>\n      <TodoList />\n      <footer>Made by @trongtai37</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}